version: "3.8"
services:
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      retries: 5
      timeout: 3s

  backend:
    build:
      context: ./IM-BACKEND
      dockerfile: Dockerfile
      cache_from:
        - node:20-alpine
    container_name: IM-BACKEND
    ports:
      - "6600:6600"
      - "10000-10100:10000-10100/udp"
      - "10000-10100:10000-10100/tcp"
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    env_file:
      - ./IM-BACKEND/.env.development
    volumes:
      - ./IM-BACKEND/uploads:/usr/src/app/uploads
      - ./IM-BACKEND/logs:/usr/src/app/logs
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 2G
        reservations:
          cpus: "1"
          memory: 1G

  frontend:
    build:
      context: ./IM-FRONTEND
      dockerfile: Dockerfile
    container_name: IM-FRONTEND
    ports:
      - "3000:3000"
    environment:
      - BACKEND_URL=http://localhost:6600
    env_file:
      - ./IM-FRONTEND/.env.development
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge
